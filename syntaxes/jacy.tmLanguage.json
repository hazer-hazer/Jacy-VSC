{
	"name": "Jacy",
	"scopeName": "source.jc",
	"fileTypes": [
		"jc"
	],
	"patterns": [
		{
			"include": "#items"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"include": "#line_comment"
				},
				{
					"include": "#block_comment"
				},
				{
					"include": "#line_doc_comment"
				},
				{
					"include": "#block_doc_comment"
				}
			]
		},
		"docs_contents": {
			"patterns": [
				{
					"name": "punctuation.definition.doc_mark.jacy",
					"match": "^@\\w+$"
				}
			]
		},
		"line_doc_comment": {
			"name": "comment.line.doc.jacy",
			"begin": "///",
			"beginCaptures": {
				"0": {
					"name": "comment.line.doc.begin.jacy"
				}
			},
			"end": "$",
			"endCaptures": {
				"0": {
					"name": "comment.line.doc.end.jacy"
				}
			},
			"patterns": [
				{"include": "#docs_contents"}
			]
		},
		"block_doc_comment": {
			"name": "comment.block.doc.jacy",
			"begin": "/\\*\\*(?!/)",
			"beginCaptures": {
				"0": {
					"name": "comment.block.doc.begin.jacy"
				}
			},
			"end": "$",
			"endCaptures": {
				"0": {
					"name": "comment.block.doc.end.jacy"
				}
			},
			"patterns": [
				{"include": "#docs_contents"}
			]
		},
		"line_comment": {
			"name": "comment.line.jacy",
			"begin": "//",
			"beginCaptures": {
				"0": {
					"name": "comment.line.begin.jacy"
				}
			},
			"end": "$",
			"endCaptures": {
				"0": {
					"name": "comment.line.end.jacy"
				}
			}
		},
		"block_comment": {
			"name": "comment.block.jacy",
			"begin": "/\\*",
			"beginCaptures": {
				"0": {
					"name": "comment.block.begin.jacy"
				}
			},
			"end": "\\*/",
			"endCaptures": {
				"0": {
					"name": "comment.block.end.jacy"
				}
			}
		},
		"keywords": {
			"patterns": [
				{
					"comment": "Control-flow keywords",
					"name": "keyword.control.jacy",
					"match": "\\b(break|continue|else|if|in|for|loop|match|return|while)\\b"
				},
				{
					"comment": "Keywords",
					"name": "keyword.other.jacy",
					"match": "\\b(party|mod|let|ref|use|super|as|move)\\b"
				},
				{
					"comment": "Reserved keywords",
					"name": "invalid.illegal.jacy",
					"match": "\\b(try|catch|final|pure|async|await|do|infix|where)\\b"
				}
			]
		},
		"misc_operators": {
			"comment": "Misc operators",
			"name": "keyword.operator.misc.jacy",
			"match": "->|=>|::|:"
		},
		"operators": {
			"patterns": [
				{
					"include": "#misc_operators"
				},
				{
					"comment": "Assignment operator",
					"name": "keyword.operator.assignment.jacy",
					"match": "\\+=|-=|/=|\\*=|%=|\\^=|&=|\\|=|<<=|>>=|="
				},
				{
					"comment": "Boolean operators",
					"name": "keyword.operator.logic.boolean.jacy",
					"match": "\\b(or|and)\\b"
				},
				{
					"comment": "Comparison operators",
					"name": "keyword.operator.comparison.jacy",
					"match": "<=|>=|<|>|==|!="
				},
				{
					"comment": "Arithmetic operators",
					"name": "keyword.operator.arithmetic.jacy",
					"match": "!|\\+(?!\\+)|-(?!-)|/|\\*|%|\\^|&|\\||<<|>>"
				},
				{
					"comment": "Mistaken operators",
					"name": "invalid.illegal.jacy",
					"match": "\\+\\+|--"
				},
				{
					"comment": "Try operators (`expr?` and `expr!`)",
					"name": "keyword.operator.misc.try.jacy",
					"match": "\\?|!"
				}
			]
		},
		"punctuation": {
			"patterns": [
				{
					"comment": "{}",
					"name": "punctuation.brace.jacy",
					"match": "[\\{\\}]"
				},
				{
					"comment": "[]",
					"name": "punctuation.bracket.jacy",
					"match": "[\\[\\]]"
				},
				{
					"comment": "()",
					"name": "punctuation.parenthesis.jacy",
					"match": "[\\(\\)]"
				}
			]
		},
		"self": {
			"comment": "Self instance variable",
			"name": "variable.language.jacy",
			"match": "\\bself\\b"
		},
		"self_path": {
			"comment": "Self as part of the part",
			"name": "keyword.other.jacy",
			"match": "(self)::"
		},
		"prelude_variants": {
			"patterns": [
				{
					"comment": "Enum",
					"name": "support.constant.jacy",
					"match": "\\b(Some|None|Ok|Err)\\b"
				}
			]
		},
		"spec_idents": {
			"patterns": [
				{
					"include": "#prelude_variants"
				},
				{
					"include": "#self_path"
				},
				{
					"include": "#self"
				}
			]
		},
		"sigils": {
			"comment": "Sigils",
			"name": "keyword.operator.sigil.jacy",
			"match": "[&*](?=[\\w\\(\\[\\|\\\"]+)"
		},
		"modifiers": {
			"patterns": [
				{
					"comment": "Mut modifier",
					"name": "storage.modifier.mut.jacy",
					"match": "\\bmut\\b"
				},
				{
					"comment": "Pub modifier",
					"name": "storage.modifier.pub.jacy",
					"match": "\\bpub\\b"
				},
				{
					"comment": "Const modifier",
					"name": "storage.modifier.const.jacy",
					"match": "\\bconst\\b"
				},
				{
					"comment": "Static modifier",
					"name": "storage.modifier.static.jacy",
					"match": "\\bstatic\\b"
				}
			]
		},
		"types": {
			"patterns": [
				{
					"match": "(&)",
					"name": "keyword.operator.ref.jacy"
				},
				{
					"include": "#builtin_types"
				},
				{
					"include": "#optional"
				},
				{
					"include": "#generic_params"
				},
				{
					"include": "#comments"
				},
				{
					"name": "entity.name.type.jacy",
					"match": "[A-Z][A-Za-z_]*"
				}
			],
			"repository": {
				"builtin_types": {
					"comment": "Built-in types",
					"name": "entity.name.type.core.jacy",
					"match": "\\b(bool|char|[ui](?:8|16|32|64|128)|f(?:16|32|64|128)|int|uint|str|String|Self|Option|Result)\\b"
				},
				"optional": {
					"comment": "Optional type",
					"name": "keyword.operator.type.option.jacy",
					"match": "[?]"
				}
			}
		},
		"generic_params": {
			"comment": "Generic parameters/Arguments",
			"name": "meta.generic_params.jacy",
			"begin": "<(?![=<])",
			"beginCaptures": {
				"0": {
					"name": "keyword.operator.generic_params.begin.jacy"
				}
			},
			"end": ">",
			"endCaptures": {
				"0": {
					"name": "keyword.operator.generic_params.end.jacy"
				}
			},
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"match": "\\b\\s*(=)\\s*\\b",
					"captures": {
						"1": {
							"name": "keyword.operator.generic_params.jacy"
						}
					}
				},
				{
					"name": "entity.name.type.jacy",
					"match": "[A-Z][A-Za-z_]*"
				},
				{
					"include": "#sigils"
				},
				{
					"include": "#modifiers"
				},
				{
					"include": "#types"
				},
				{
					"include": "#generic_params"
				},
				{
					"include": "#lifetime"
				}
			]
		},
		"lifetime": {
			"comment": "Lifetime",
			"name": "storage.modifier.lifetime.jacy",
			"match": "'([\\p{Alpha}_][\\w]*)\\b",
			"captures": {
				"1": {
					"name": "entity.name.lifetime.jacy"
				}
			}
		},
		"ref_lifetime": {
			"comment": "Reference lifetime (`&'a expr`)",
			"match": "(&)('([\\p{Alpha}_][\\w]()))\\b",
			"captures": {
				"1": {
					"name": "keyword.operator.sigil.jacy"
				},
				"2": {
					"name": "storage.modifier.lifetime.jacy"
				},
				"3": {
					"name": "entity.name.lifetime.jacy"
				}
			}
		},
		"items": {
			"patterns": [
				{
					"include": "#func"
				},
				{
					"include": "#init"
				},
				{
					"include": "#type_items"
				},
				{
					"include": "#type_alias"
				},
				{
					"include": "#impl"
				}
			]
		},
		"func": {
			"comment": "Function definition",
			"name": "meta.definition.function.jacy",
			"begin": "\\b(func)\\b",
			"end": "(?<=})|$",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.func.jacy"
				}
			},
			"patterns": [
				{
					"include": "#generic_params"
				},
				{
					"name": "invalid.illegal.jacy",
					"patterns": [{
						"include": "#keywords"
					}]
				},
				{
					"match": "([\\p{Alpha}_][\\w]*)",
					"name": "entity.name.function.jacy"
				},
				{
					"include": "#func_params"
				},
				{
					"name": "meta.definition.function-return-type.jacy",
					"begin": "(:)",
					"end": "(?=[\\{;=])",
					"beginCaptures": {
						"1": {
							"name": "keyword.punctuation.colon.jacy"
						}
					},
					"patterns": [
						{
							"include": "#types"
						}
					]
				},
				{
					"include": "#func_body"
				}
			]
		},
		"func_params": {
			"name": "meta.definition.params.jacy",
			"begin": "(\\()",
			"end": "(\\))",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.params.begin.jacy"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.params.end.jacy"
				}
			},
			"patterns": [
				{
					"end": "(?=[:])",
					"patterns": [
						{
							"include": "#patterns"
						}
					]
				},
				{
					"begin": "(:)",
					"end": "(?=[,\\)])",
					"beginCaptures": {
						"1": {
							"name": "keyword.punctuation.colon.jacy"
						}
					},
					"patterns": [
						{
							"include": "#types"
						}
					]
				}
			]
		},
		"func_body": {
			"patterns": [
				{
					"name": "meta.definition.function-return-type.jacy",
					"begin": "(=)",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.assign.jacy"
						}
					},
					"end": "(?=;)",
					"patterns": [
						{
							"include": "#expressions"
						}
					]
				},
				{
					"begin": "(\\{)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.brace.begin.jacy"
						}
					},
					"end": "(\\})",
					"endCaptures": {
						"1": {
							"name": "punctuation.brace.end.jacy"
						}
					},
					"patterns": [
						{
							"include": "#statements"
						}
					]
				}
			]
		},
		"init": {
			"comment": "Initializer definition",
			"name": "meta.definition.init.jacy",
			"begin": "\\b(init)([?!])?",
			"end": "(?<=})|$",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.init.jacy"
				},
				"2": {
					"name": "keyword.punctuation.jacy"
				}
			},
			"patterns": [
				{
					"include": "#generic_params"
				},
				{
					"include": "#func_params"
				},
				{
					"include": "#func_body"
				}
			]
		},
		"type_items": {
			"comment": "Type item",
			"begin": "\\b(enum|struct|trait)\\b",
			"end": "(?=[\\{\\(;])",
			"beginCaptures": {
				"1": {
					"name": "storage.type.jacy"
				}
			},
			"patterns": [
				{
					"begin": "([\\p{Alpha}_][\\w]*)",
					"end": "(?=[\\{;])",
					"beginCaptures": {
						"1": {
							"name": "entity.name.type.jacy"
						}
					},
					"patterns": [
						{
							"include": "#sigils"
						},
						{
							"include": "#modifiers"
						},
						{
							"include": "#types"
						},
						{
							"include": "#generic_params"
						},
						{
							"include": "#misc_operators"
						}
					]
				}
			]
		},
		"impl": {
			"comment": "Implementation item",
			"begin": "\\b(impl)\\b",
			"end": "(?=[\\{])",
			"beginCaptures": {
				"1": {
					"name": "storage.type.impl.jacy"
				}
			},
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#generic_params"
				},
				{
					"comment": "Super traits",
					"begin": "([\\p{Alpha}_][\\w]*)|(?=\\s*for)",
					"end": "(?=[\\{])",
					"beginCaptures": {
						"1": {
							"name": "entity.name.type.jacy"
						}
					},
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#types"
						},
						{
							"include": "#lifetime"
						},
						{
							"include": "#generic_params"
						},
						{
							"begin": "\\b(for)\\b",
							"end": "(?<=\\w)(?<!\\sfor)",
							"beginCaptures": {
								"1": {
									"name": "keyword.other.for.jacy"
								}
							},
							"patterns": [
								{
									"include": "#comments"
								},
								{
									"include": "#types"
								},
								{
									"match": "[\\p{Alpha}_][\\w]*",
									"name": "entity.name.type.jacy"
								}
							]
						}
					]
				}
			]
		},
		"type_alias": {
			"comment": "Type alias",
			"begin": "\\b(type)\\b",
			"end": "(?=;)",
			"beginCaptures": {
				"1": {
					"name": "storage.type.jacy"
				},
				"2": {
					"name": "entity.name.type.jacy"
				}
			},
			"patterns": [
				{
					"begin": "([\\p{Alpha}_][\\w]*)",
					"end": "(?=;)",
					"beginCaptures": {
						"1": {
							"name": "entity.name.type.jacy"
						}
					},
					"patterns": [
						{
							"match": "(=)",
							"name": "keyword.operator.assign.jacy"
						},
						{
							"include": "#types"
						}
					]
				}
			]
		},
		"patterns": {
			
		},
		"statements": {
			"patterns": [
				{
					"name": "punctuation.terminator.jacy",
					"match": "(;)"
				},
				{
					"include": "#expressions"
				},
				{
					"include": "#items"
				},
				{
					"include": "#comments"
				},
				{
					"include": "#modifiers"
				},
				{
					"include": "#operators"
				},
				{
					"include": "#punctuation"
				},
				{
					"include": "#sigils"
				},
				{
					"include": "#lifetime"
				}
			]
		},
		"expressions": {
			"patterns": [
				{
					"include": "#func_call"
				},
				{
					"include": "#literals"
				},
				{
					"include": "#block_expr"
				}
			],
			"repository": {
				"literals": {
					"patterns": [
						{
							"include": "#bool_lit"
						},
						{
							"include": "#int_lit"
						},
						{
							"include": "#float_lit"
						},
						{
							"include": "#char_lit"
						},
						{
							"include": "#string_lit"
						}
					],
					"repository": {
						"bool_lit": {
							"name": "constant.language.boolean.jacy",
							"match": "\\b(true|false)\\b"
						},
						"int_lit": {
							"patterns": [
								{
									"comment": "Dec int literal",
									"name": "constant.numeric.integer.dec.jacy",
									"match": "\\b([0-9][0-9_]*)(?:([ui](?:8|16|32|64|128)|i|u))?\\b",
									"captures": {
										"3": {
											"name": "invalid.illegal.jacy"
										}
									}
								},
								{
									"comment": "Hex int literal",
									"name": "constant.numeric.integer.hex.jacy",
									"match": "\\b(0x[a-fA-F0-9_]+)(?:([ui](?:8|16|32|64|128)|i|u))?\\b",
									"captures": {
										"3": {
											"name": "invalid.illegal.jacy"
										}
									}
								},
								{
									"comment": "Octo int literal",
									"name": "constant.numeric.integer.oct.jacy",
									"match": "\\b(0o[0-7_]+)(?:([ui](?:8|16|32|64|128)|i|u))?\\b",
									"captures": {
										"3": {
											"name": "invalid.illegal.jacy"
										}
									}
								},
								{
									"comment": "Bin int literal",
									"name": "constant.numeric.integer.bin.jacy",
									"match": "\\b(0b[01_]+)(?:([ui](?:8|16|32|64|128)|i|u))?\\b",
									"captures": {
										"3": {
											"name": "invalid.illegal.jacy"
										}
									}
								}
							]
						},
						"float_lit": {
							"patterns": [
								{
									"comment": "Float literal",
									"name": "constant.numeric.float.jacy",
									"match": "\\b([0-9][0-9_]*\\.[0-9][0-9_]*)\\b"
								},
								{
									"comment": "Float literal with type",
									"name": "constant.numeric.float.jacy",
									"match": "\\b([0-9][0-9_]*(?:\\.[0-9][0-9_]*)?)(f32|f64|f|d)\\b"
								},
								{
									"comment": "Float literal with exp",
									"name": "constant.numeric.float.jacy",
									"match": "\\b([0-9][0-9_]*(?:\\.[0-9][0-9_]*)?[eE][+-]?[0-9_]+)(f32|f64|f|d)?\\b"
								}
							]
						},
						"string_lit": {
							"patterns": [
								{
									"comment": "String literal",
									"name": "string.quoted.double.jacy",
									"begin": "\"",
									"beginCaptures": {
										"0": {
											"name": "punctuation.definition.string.begin.jacy"
										}
									},
									"end": "\""
								}
							]
						},
						"char_lit": {
							"name": "string.quoted.single.jacy",
							"match": "(b?')(?:[^'\\\\]|\\\\(?:x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.))([^']*)(')",
							"captures": {
								"1": {
									"name": ""
								},
								"2": {
									"name": "invalid.illegal.jacy"
								},
								"3": {
									"name": ""
								}
							}
						}
					}
				},
				"block_expr": {
					"begin": "(\\{)",
					"end": "(\\})",
					"beginCaptures": {
						"1": {
							"name": "punctuation.block-expr.begin.jacy"
						}
					},
					"endCaptures": {
						"1": {
							"name": "punctuation.block-expr.end.jacy"
						}
					},
					"patterns": [{
						"include": "#statements"
					}]
				},
				"named_list": {
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"begin": "([\\p{L}_][\\p{L}_\\p{N}\\p{M}]*)\\s*(:)",
							"beginCaptures": {
								"1": {
									"name": "support.function.label.jacy"
								},
								"2": {
									"name": "punctuation.definition.identifier.jacy"
								},
								"3": {
									"name": "punctuation.definition.identifier.jacy"
								},
								"4": {
									"name": "punctuation.separator.label-colon.jacy"
								}
							},
							"comment": "an element with a label",
							"end": "(?=[,)])",
							"patterns": [
								{
									"include": "#expressions"
								},
								{
									"include": "#named_list"
								}
							]
						},
						{
							"begin": "(?![,)])(?=\\S)",
							"comment": "an element without a label (i.e. anything else)",
							"end": "(?=[,)])",
							"patterns": [
								{
									"include": "#expressions"
								}
							]
						}
					]
				},
				"func_call": {
					"comment": "Function call",
					"begin": "([\\p{L}_][\\p{L}_\\p{N}\\p{M}]*)\\s*(\\()",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.call.jacy"
						},
						"2": {
							"name": "punctuation.definition.arguments.begin.jacy"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.arguments.end.jacy"
						}
					},
					"name": "meta.function-call.jacy",
					"patterns": [
						{
							"include": "#named_list"
						}
					]
				}
			}
		}
	}
}
	