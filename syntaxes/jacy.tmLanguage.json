{
	"name": "Jacy",
	"scopeName": "source.jc",
	"fileTypes": [
		"jc"
	],
	"patterns": [
		{"include": "#comments"},
		{"include": "#statements"},
		{"include": "#path_prefix"},
		{"include": "#attrs"}
	],
	"repository": {
		"comments": {
			"patterns": [
				{"include": "#line_comment"},
				{"include": "#block_comment"},
				{"include": "#line_doc_comment"},
				{"include": "#block_doc_comment"}
			]
		},
		"docs_contents": {
			"patterns": []
		},
		"line_doc_comment": {
			"name": "comment.line.doc.jacy",
			"begin": "///",
			"beginCaptures": {
				"0": {
					"name": "comment.line.doc.begin.jacy"
				}
			},
			"end": "$",
			"endCaptures": {
				"0": {
					"name": "comment.line.doc.end.jacy"
				}
			},
			"patterns": [
				{"include": "#docs_contents"}
			]
		},
		"block_doc_comment": {
			"name": "comment.block.doc.jacy",
			"begin": "/\\*\\*(?!/)",
			"beginCaptures": {
				"0": {
					"name": "comment.block.doc.begin.jacy"
				}
			},
			"end": "$",
			"endCaptures": {
				"0": {
					"name": "comment.block.doc.end.jacy"
				}
			},
			"patterns": [
				{"include": "#docs_contents"}
			]
		},
		"line_comment": {
			"name": "comment.line.jacy",
			"begin": "//",
			"beginCaptures": {
				"0": {
					"name": "comment.line.begin.jacy"
				}
			},
			"end": "$",
			"endCaptures": {
				"0": {
					"name": "comment.line.end.jacy"
				}
			}
		},
		"block_comment": {
			"name": "comment.block.jacy",
			"begin": "/\\*",
			"beginCaptures": {
				"0": {
					"name": "comment.block.begin.jacy"
				}
			},
			"end": "\\*/",
			"endCaptures": {
				"0": {
					"name": "comment.block.end.jacy"
				}
			}
		},

		"expr_keywords": {
			"patterns": [
				{
					"comment": "Control-flow keywords",
					"name": "keyword.control.jacy",
					"match": "\\b(break|continue|else|elif|if|in|for|loop|match|return|while)\\b"
				},
				{
					"comment": "Assignment operator",
					"name": "keyword.operator.assignment.jacy",
					"match": "\\+=|-=|/=|\\*=|%=|\\^=|&=|\\|=|<<=|>>=|="
				},
				{
					"comment": "Boolean operators",
					"name": "keyword.operator.logic.boolean.jacy",
					"match": "\\b(or|and)\\b"
				},
				{
					"comment": "Comparison operators",
					"name": "keyword.operator.comparison.jacy",
					"match": "<=|>=|<|>|==|!=|<=>"
				},
				{
					"comment": "Arithmetic operators",
					"name": "keyword.operator.arithmetic.jacy",
					"match": "!|\\+(?!\\+)|-(?!-)|/|\\*|%|\\^|&|\\||<<|>>"
				},
				{
					"comment": "Mistaken operators",
					"name": "invalid.illegal.jacy",
					"match": "\\+\\+|--"
				},
				{
					"match": "(\\*)(?=\\w+)",
					"captures": {
						"1": {
							"name": "keyword.operator.deref.jacy"
						}
					}
				},
				{
					"name": "keyword.operator.access.dot.jacy",
					"match": "\\.(?!\\.)"
				},
				{
					"comment": "Try operators (`expr?` and `expr!`)",
					"name": "keyword.operator.misc.try.jacy",
					"match": "\\?|\\!"
				}
			]
		},

		"item_keywords": {
			"patterns": [
				{
					"name": "storage.modifier.jacy",
					"match": "\\b(pub)\\b"
				},
				{
					"name": "storage.modifier.jacy",
					"match": "\\b(const)\\b"
				},
				{
					"name": "keyword.declaration.type.jacy storage.type.jacy",
					"match": "\\b(type)\\b"
				},
				{
					"name": "keyword.declaration.enum.jacy storage.type.jacy",
					"match": "\\b(enum)\\b"
				},
				{
					"name": "keyword.declaration.trait.jacy storage.type.jacy",
					"match": "\\b(trait)\\b"
				},
				{
					"name": "keyword.declaration.struct.jacy storage.type.jacy",
					"match": "\\b(struct)\\b"
				},
				{
					"name": "storage.modifier.static.jacy",
					"match": "\\b(static)\\b"
				},
				{
					"name": "keyword.other.party.jacy",
					"match": "\\b(party)\\b"
				},
				{
					"comment": "Reserved keywords",
					"name": "invalid.illegal.jacy",
					"match": "\\b(try|catch|final|pure|async|await|do|infix|where)\\b"
				},
				{
					"name": "keyword.operator.arrow.single.jacy",
					"match": "->"
				},
				{
					"name": "keyword.operator.arrow.double.jacy",
					"match": "=>"
				},
				{
					"comment": "colon",
					"name": "keyword.operator.jacy",
					"match": ":(?!:)"
				},
				{
					"name": "keyword.operator.namespace.jacy",
					"match": "::"
				}
			]
		},

		"punctuation": {
			"patterns": [
				{
					"comment": "{}",
					"name": "punctuation.brace.jacy",
					"match": "[\\{\\}]"
				},
				{
					"comment": "[]",
					"name": "punctuation.bracket.jacy",
					"match": "[\\[\\]]"
				},
				{
					"comment": "()",
					"name": "punctuation.parenthesis.jacy",
					"match": "[\\(\\)]"
				}
			]
		},

		"path_prefix": {
			"patterns": [
				{
					"comment": "self as path prefix",
					"match": "\\b[Ss]elf\\b",
					"name": "variable.language.self.jacy"
				},
				{
					"comment": "super as path prefix",
					"match": "\\bsuper\\b",
					"name": "variable.language.super.jacy"
				}
			]
		},

		"path": {
			"comment": "Some path",
			"patterns": [
				{"include": "#comments"},
				{"include": "#generic_params"},
				{
					"match": "(\\p{Alpha}+)(((?<!super|self|party)|(?<=\\>))::)((\\b(\\p{Alpha}+)\\b|\\*)(?!::|\\())",
					"captures": {
						"1": {
							"name": "entity.name.namespace.jacy"
						},
						"2": {
							"name": "keyword.operator.namespace.jacy"
						},
						"3": {
							"name": "entity.name.namespace.jacy"
						}
					}
				}
			]
		},

		"types": {
			"patterns": [
				{"include": "#comments"},
				{"include": "#generic_params"},

				{"include": "#builtin_types"},
				{"include": "#optional"},
				{"include": "#prelude_variants"},

				{
					"match": "(&)",
					"name": "keyword.operator.ref.jacy"
				},
				{
					"name": "entity.name.type.jacy",
					"match": "[A-Z][A-Za-z_]*"
				}
			],
			"repository": {
				"builtin_types": {
					"comment": "Built-in types",
					"name": "entity.name.type.core.jacy",
					"match": "\\b(bool|char|[ui](?:8|16|32|64|128)|f(?:16|32|64|128)|int|uint|str|String|Self|Option|Result)\\b"
				},
				"optional": {
					"comment": "Optional type",
					"name": "keyword.operator.type.option.jacy",
					"match": "[?]"
				},
				"prelude_variants": {
					"patterns": [
						{
							"comment": "Enum",
							"name": "support.constant.jacy",
							"match": "\\b(Some|None|Ok|Err)\\b"
						}
					]
				}
			}
		},
		"generic_params": {
			"comment": "Generic parameters/Arguments",
			"name": "meta.generic_params.jacy",
			"begin": "<(?![=<])",
			"beginCaptures": {
				"0": {
					"name": "keyword.operator.generic_params.begin.jacy"
				}
			},
			"end": ">",
			"endCaptures": {
				"0": {
					"name": "keyword.operator.generic_params.end.jacy"
				}
			},
			"patterns": [
				{"include": "#comments"},
				{
					"match": "\\b(=)\\b",
					"captures": {
						"1": {
							"name": "keyword.operator.generic_params.jacy"
						}
					}
				},
				{
					"name": "entity.name.type.jacy",
					"match": "[A-Z][A-Za-z_]*"
				},
				{"include": "#sigils"},
				{"include": "#modifiers"},
				{"include": "#types"},
				{"include": "#generic_params"},
				{"include": "#lifetime"}
			]
		},
		"lifetime": {
			"comment": "Lifetime",
			"name": "storage.modifier.lifetime.jacy",
			"match": "'([\\p{Alpha}_][\\w]*)\\b",
			"captures": {
				"1": {
					"name": "entity.name.lifetime.jacy"
				}
			}
		},
		"ref_lifetime": {
			"comment": "Reference lifetime (`&'a expr`)",
			"match": "(&)('([\\p{Alpha}_][\\w]()))\\b",
			"captures": {
				"1": {
					"name": "keyword.operator.sigil.jacy"
				},
				"2": {
					"name": "storage.modifier.lifetime.jacy"
				},
				"3": {
					"name": "entity.name.lifetime.jacy"
				}
			}
		},
		"items": {
			"patterns": [
				{"include": "#item_keywords"},
				{"include": "#func"},
				{"include": "#init"},
				{"include": "#type_items"},
				{"include": "#type_alias"},
				{"include": "#impl"},
				{"include": "#use_decl"},
				{"include": "#mod"},
				{"include": "#struct"},
				{"include": "#attrs"}
			],
			"repository": {
				"func": {
					"comment": "Function definition",
					"name": "meta.definition.function.jacy",
					"begin": "(?=\\s*\\b(?:func)\\b)",
					"end": "(?=$|\\}|;)",
					"patterns": [
						{
							"begin": "\\b(func)\\b",
							"beginCaptures": {
								"1": {
									"name": "keyword.other.func.jacy"
								}
							},
							"end": "(?=\\(|\\{|:)",
							"patterns": [
								{"include": "#comments"},
								{"include": "#generic_params"},
								{
									"match": "\\p{Alpha}+",
									"captures": {
										"0": {
											"name": "entity.name.function.jacy"
										}
									}
								}
							]
						},
						{
							"begin": "(?=\\()",
							"end": "(?<=\\))",
							"patterns": [
								{"include": "#comments"},
								{"include": "#func_params"}
							]
						},
						{
							"name": "meta.definition.function-return-type.jacy",
							"begin": "(:)|(->)",
							"end": "(?=\\{|;|=|$)",
							"beginCaptures": {
								"1": {
									"name": "keyword.punctuation.colon.jacy"
								},
								"2": {
									"name": "invalid.illegal.jacy"
								}
							},
							"patterns": [
								{"include": "#comments"},
								{"include": "#types"}
							]
						},
						{
							"name": "meta.definition.function-body.expression.jacy",
							"begin": "(=)",
							"beginCaptures": {
								"1": {
									"name": "keyword.operator.assignment.jacy"
								}
							},
							"end": "(?=;)",
							"patterns": [
								{"include": "#comments"},
								{"include": "#expressions"}
							]
						}
					]
				},
				"func_params": {
					"name": "meta.definition.params.jacy",
					"begin": "(\\()",
					"end": "(\\))",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.params.begin.jacy"
						}
					},
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.params.end.jacy"
						}
					},
					"patterns": [
						{
							"begin": "\\b(\\p{Alpha}+)\\b\\s*(?!:)",
							"end": "(?=:)",
							"beginCaptures": {
								"1": {
									"name": "support.function.label.jacy"
								}
							},
							"patterns": [
								{"include": "#pats"}
							]
						},
						{
							"end": "(?=:)",
							"patterns": [
								{"include": "#pats"}
							]
						},
						{
							"begin": "(:)",
							"end": "(?=[,\\)])",
							"beginCaptures": {
								"1": {
									"name": "keyword.punctuation.colon.jacy"
								}
							},
							"patterns": [
								{"include": "#types"}
							]
						}
					]
				},
				"func_body": {
					"patterns": [
						{
							"begin": "(\\{)",
							"beginCaptures": {
								"1": {
									"name": "punctuation.brace.begin.jacy"
								}
							},
							"end": "(\\})",
							"endCaptures": {
								"1": {
									"name": "punctuation.brace.end.jacy"
								}
							},
							"patterns": [
								{"include": "#statements"}
							]
						}
					]
				},
				"init": {
					"comment": "Initializer definition",
					"name": "meta.definition.init.jacy",
					"begin": "\\b(init)([?!])?",
					"end": "(?<=})|$",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.init.jacy"
						},
						"2": {
							"name": "keyword.punctuation.jacy"
						}
					},
					"patterns": [
						{"include": "#generic_params"},
						{"include": "#func_params"},
						{"include": "#func_body"}
					]
				},
				"struct": {
					"comment": "`struct` item",
					"name": "meta.definition.struct.jacy",
					"begin": "\\b(struct)\\b",
					"end": "(?=[\\{;])",
					"beginCaptures": {
						"1": {
							"name": "storage.type.jacy"
						}
					},
					"patterns": [
						{
							"begin": "([\\p{Alpha}_][\\w]*)",
							"end": "(?=[\\{;])",
							"beginCaptures": {
								"1": {
									"name": "entity.name.struct.jacy"
								}
							},
							"patterns": [
								{
									"begin": "(:)",
									"end": "(?=[:\\{])",
									"beginCaptures": {
										"1": {
											"name": "keyword.punctuation.colon.jacy"
										}
									},
									"patterns": [
										{"include": "#types"}
									]
								},
								{"include": "#items"}
							]
						}
					]
				},
				"type_items": {
					"comment": "Type item",
					"begin": "\\b(trait)\\b",
					"end": "(?=[\\{\\(;])",
					"beginCaptures": {
						"1": {
							"name": "storage.type.jacy"
						}
					},
					"patterns": [
						{
							"begin": "([\\p{Alpha}_][\\w]*)",
							"end": "(?=[\\{;])",
							"beginCaptures": {
								"1": {
									"name": "entity.name.type.jacy"
								}
							},
							"patterns": [
								{"include": "#sigils"},
								{"include": "#modifiers"},
								{"include": "#types"},
								{"include": "#generic_params"}
							]
						}
					]
				},
				"impl": {
					"comment": "Implementation item",
					"begin": "\\b(impl)\\b",
					"end": "(?=[\\{])",
					"beginCaptures": {
						"1": {
							"name": "storage.type.impl.jacy"
						}
					},
					"patterns": [
						{"include": "#comments"},
						{"include": "#generic_params"},
						{
							"comment": "Super traits",
							"begin": "([\\p{Alpha}_][\\w]*)|(?=\\s*for)",
							"end": "(?=[\\{])",
							"beginCaptures": {
								"1": {
									"name": "entity.name.type.jacy"
								}
							},
							"patterns": [
								{"include": "#comments"},
								{"include": "#types"},
								{"include": "#lifetime"},
								{"include": "#generic_params"},
								{
									"begin": "\\b(for)\\b",
									"end": "(?<=\\w)(?<!\\sfor)",
									"beginCaptures": {
										"1": {
											"name": "keyword.other.for.jacy"
										}
									},
									"patterns": [
										{"include": "#comments"},
										{"include": "#types"},
										{
											"match": "[\\p{Alpha}_][\\w]*",
											"name": "entity.name.type.jacy"
										}
									]
								}
							]
						}
					]
				},
				"type_alias": {
					"comment": "Type alias",
					"begin": "\\b(type)\\b",
					"end": "(?=;)",
					"beginCaptures": {
						"1": {
							"name": "keyword.declaration.type.jacy storage.type.jacy"
						}
					},
					"patterns": [
						{
							"begin": "([\\p{Alpha}_][\\w]*)",
							"end": "(?=;)",
							"beginCaptures": {
								"1": {
									"name": "entity.name.type.declaration.jacy"
								}
							},
							"patterns": [
								{
									"match": "(=)",
									"name": "keyword.operator.assign.jacy"
								},
								{"include": "#types"}
							]
						}
					]
				},
				"use_decl": {
					"comment": "`use` declaration",
					"name": "meta.use.jacy",
					"begin": "\\b(use)\\b",
					"end": "(;)",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.jacy"
						}
					},
					"endCaptures": {
						"1": {
							"name": "punctuation.terminator.jacy"
						}
					},
					"patterns": [
						{"include": "#comments"},
						{"include": "#path_prefix"},
						{"include": "#path"}
					]
				},
				"mod": {
					"comment": "`mod` item",
					"begin": "\\b(mod)\\b",
					"end": "(?<=})|$",
					"beginCaptures": {
						"1": {
							"name": "storage.type.jacy"
						}
					},
					"patterns": [
						{
							"match": "([\\p{Alpha}_][\\w]*)",
							"name": "support.type.jacy"
						},
						{
							"begin": "(\\{)",
							"beginCaptures": {
								"1": {
									"name": "punctuation.brace.begin.jacy"
								}
							},
							"end": "(\\})",
							"endCaptures": {
								"1": {
									"name": "punctuation.brace.end.jacy"
								}
							},
							"patterns": [
								{"include": "#items"}
							]
						}
					]
				}
			}
		},
		"attrs": {
			"comment": "attribute",
			"name": "meta.attr.jacy",
			"begin": "(@)\\s*(\\p{Alpha}+)",
			"beginCaptures": {
				"1": {
					"name": "entity.other.attribute-name.at.jacy"
				},
				"2": {
					"name": "entity.other.attribute-name.jacy"
				},
				"3": {
					"name": "punctuation.definition.attr.arguments.begin.jacy"
				}
			},
			"end": "(?=\\))|$",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.attr.arguments.end.jacy"
				},
				"2": {
					"name": "punctuation.terminator.jacy"
				}
			},
			"patterns": [
				{"include": "#comments"},
				{
					"begin": "(\\()",
					"end": "(\\))",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.attr.arguments.end.jacy"
						}
					},
					"patterns": [
						{"include": "#named_list"}
					]
				}
			]
		},
		"named_list": {
			"patterns": [
				{"include": "#comments"},
				{
					"begin": "([\\p{L}_][\\p{L}_\\p{N}\\p{M}]*)\\s*(:)",
					"beginCaptures": {
						"1": {
							"name": "support.function.label.jacy"
						},
						"2": {
							"name": "punctuation.separator.label-colon.jacy"
						}
					},
					"comment": "an element with a label",
					"end": "(?=[,)])",
					"patterns": [
						{"include": "#expressions"},
						{"include": "#named_list"}
					]
				},
				{
					"begin": "(?![,)])(?=\\S)",
					"comment": "an element without a label (i.e. anything else)",
					"end": "(?=[,)])",
					"patterns": [
						{"include": "#expressions"}
					]
				}
			]
		},
		"pats": {
			"patterns": [
				{
					"match": "\\bref\\b",
					"name": "storage.modifier.ref.pattern.jacy"
				},
				{
					"match": "([A-Z]\\p{Alpha}+)\\s*(?=[\\{\\(])",
					"name": "entity.name.type.jacy"
				},
				{
					"match": "(@)",
					"name": "keyword.operator.pattern.bind.jacy"
				},
				{
					"match": "(\\p{Alpha}+)",
					"name": "variable.other.pattern.jacy"
				}
			]
		},
		"statements": {
			"patterns": [
				{"include": "#comments"},
				{"include": "#expressions"},
				{"include": "#items"},
				{"include": "#modifiers"},
				{"include": "#operators"},
				{"include": "#let"},
				{
					"name": "punctuation.terminator.jacy",
					"match": "(;)"
				}
			],
			"repository": {
				"let": {
					"comment": "`let` statement",
					"name": "meta.definition.variable.jacy",
					"begin": "\\b(let)\\b",
					"end": "(;)",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.let.jacy"
						}
					},
					"endCaptures": {
						"1": {
							"name": "punctuation.terminator.jacy"
						}
					},
					"patterns": [
						{
							"name": "meta.definition.variable.pattern.jacy",
							"begin": "(?<=(\\blet\\b))",
							"end": "(?=[:=;])",
							"patterns": [
								{"include": "#comments"},
								{"include": "#pats"}
							]
						},
						{
							"begin": "(:)",
							"end": "(?=[;=])",
							"beginCaptures": {
								"1": {
									"name": "keyword.punctuation.colon.jacy"
								}
							},
							"patterns": [
								{"include": "#comments"},
								{"include": "#types"}
							]
						},
						{
							"begin": "=",
							"end": "(?=;)",
							"beginCaptures": {
								"0": {
									"name": "keyword.operator.assign.jacy"
								}
							},
							"patterns": [
								{"include": "#comments"},
								{"include": "#expressions"}
							]
						}
					]
				}
			}
		},
		"expressions": {
			"patterns": [
				{"include": "#comments"},
				{"include": "#expr_keywords"},
				{"include": "#func_call"},
				{"include": "#literals"},
				{"include": "#block_expr"},
				{"include": "#path"},
				{"include": "#self"},
				{"include": "#types"},
				{"include": "#tuple"}
			],
			"repository": {
				"self": {
					"comment": "Self instance variable",
					"name": "variable.language.jacy",
					"match": "\\bself\\b"
				},
				"literals": {
					"patterns": [
						{"include": "#bool_lit"},
						{"include": "#int_lit"},
						{"include": "#float_lit"},
						{"include": "#char_lit"},
						{"include": "#string_lit"}
					],
					"repository": {
						"bool_lit": {
							"name": "constant.language.boolean.jacy",
							"match": "\\b(true|false)\\b"
						},
						"int_lit": {
							"patterns": [
								{
									"comment": "Dec int literal",
									"name": "constant.numeric.integer.dec.jacy",
									"match": "\\b([0-9][0-9_]*)(?:([ui](?:8|16|32|64|128)|i|u))?\\b",
									"captures": {
										"3": {
											"name": "invalid.illegal.jacy"
										}
									}
								},
								{
									"comment": "Hex int literal",
									"name": "constant.numeric.integer.hex.jacy",
									"match": "\\b(0x[a-fA-F0-9_]+)(?:([ui](?:8|16|32|64|128)|i|u))?\\b",
									"captures": {
										"3": {
											"name": "invalid.illegal.jacy"
										}
									}
								},
								{
									"comment": "Octo int literal",
									"name": "constant.numeric.integer.oct.jacy",
									"match": "\\b(0o[0-7_]+)(?:([ui](?:8|16|32|64|128)|i|u))?\\b",
									"captures": {
										"3": {
											"name": "invalid.illegal.jacy"
										}
									}
								},
								{
									"comment": "Bin int literal",
									"name": "constant.numeric.integer.bin.jacy",
									"match": "\\b(0b[01_]+)(?:([ui](?:8|16|32|64|128)|i|u))?\\b",
									"captures": {
										"3": {
											"name": "invalid.illegal.jacy"
										}
									}
								}
							]
						},
						"float_lit": {
							"patterns": [
								{
									"comment": "Float literal",
									"name": "constant.numeric.float.jacy",
									"match": "\\b([0-9][0-9_]*\\.[0-9][0-9_]*)\\b"
								},
								{
									"comment": "Float literal with type",
									"name": "constant.numeric.float.jacy",
									"match": "\\b([0-9][0-9_]*(?:\\.[0-9][0-9_]*)?)(f32|f64|f|d)\\b"
								},
								{
									"comment": "Float literal with exp",
									"name": "constant.numeric.float.jacy",
									"match": "\\b([0-9][0-9_]*(?:\\.[0-9][0-9_]*)?[eE][+-]?[0-9_]+)(f32|f64|f|d)?\\b"
								}
							]
						},
						"string_lit": {
							"patterns": [
								{
									"comment": "String literal",
									"name": "string.quoted.double.jacy",
									"begin": "(\")",
									"beginCaptures": {
										"1": {
											"name": "punctuation.definition.string.begin.jacy"
										}
									},
									"end": "(\")",
									"endCaptures": {
										"1": {
											"name": "punctuation.definition.string.end.jacy"
										}
									}
								}
							]
						},
						"char_lit": {
							"name": "string.quoted.single.jacy",
							"match": "(b?')(?:[^'\\\\]|\\\\(?:x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.))([^']*)(')",
							"captures": {
								"1": {
									"name": ""
								},
								"2": {
									"name": "invalid.illegal.jacy"
								},
								"3": {
									"name": ""
								}
							}
						}
					}
				},
				"block_expr": {
					"begin": "(\\{)",
					"end": "(\\})",
					"beginCaptures": {
						"1": {
							"name": "punctuation.block-expr.begin.jacy"
						}
					},
					"endCaptures": {
						"1": {
							"name": "punctuation.block-expr.end.jacy"
						}
					},
					"patterns": [{"include": "#statements"}]
				},
				"func_call": {
					"comment": "Function call",
					"name": "meta.function.call.jacy",
					"begin": "(::)?((\\p{Ll}\\p{L}*)|(\\p{Lu}\\p{L}*)|(?<=[\\>\\)\\]\\}\\?\\!]))\\s*(\\()",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.namespace.jacy"
						},
						"3": {
							"name": "entity.name.function.call.jacy"
						},
						"4": {
							"name": "entity.name.type.constructor.call.jacy"
						},
						"5": {
							"name": "punctuation.definition.arguments.begin.jacy"
						}
					},
					"end": "(?=\\))",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.arguments.end.jacy"
						}
					},
					"patterns": [
						{"include": "#named_list"}
					]
				},
				"tuple": {
					"name": "meta.tuple.expression.jacy",
					"begin": "\\(",
					"end": "\\)",
					"patterns": [
						{"include": "#expressions"},
						{
							"match": "(,)",
							"name": "punctuation.separator.tuple.colon.jacy"
						}
					]
				}
			}
		}
	}
}
