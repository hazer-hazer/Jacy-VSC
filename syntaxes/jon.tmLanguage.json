{
	"name": "jon",
	"scopeName": "source.jon",
	"fileTypes": [
		"jon"
	],
	"patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#key_value"
        },
		{
			"include": "#value"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"include": "#line_comment"
				},
				{
					"include": "#block_comment"
				}
			]
		},
		"line_comment": {
			"name": "comment.line.jon",
			"begin": "//",
			"beginCaptures": {
				"0": {
					"name": "comment.line.begin.jon"
				}
			},
			"end": "$",
			"endCaptures": {
				"0": {
					"name": "comment.line.end.jon"
				}
			}
		},
		"block_comment": {
			"name": "comment.block.jon",
			"begin": "/\\*",
			"beginCaptures": {
				"0": {
					"name": "comment.block.begin.jon"
				}
			},
			"end": "\\*/",
			"endCaptures": {
				"0": {
					"name": "comment.block.end.jon"
				}
			}
		},
        "string": {
            "patterns": [
                {
					"comment": "Multi-line string literal",
					"name": "string.quoted.triple.jon",
					"begin": "('''|\"\"\")",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.string.begin.jon"
						}
					},
					"end": "(\\1)",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.string.end.jon"
						}
					}
                },
                {
					"comment": "Double-quoted string literal",
					"name": "string.quoted.double.jon",
					"match": "(\")(([^\"\\\\\\n]|\\\\[\"\\\\bfnrt/]|\\\\u[0-9a-fA-F]{4})*)(\")",
					"captures": {
						"1": {
							"name": "punctuation.definition.string.begin.jon"
						},
						"3": {
							"name": "punctuation.definition.string.end.jon"
						}
					}
                },
                {
					"comment": "Single-quoted string literal",
					"name": "string.quoted.double.jon",
					"match": "(')(([^'\\\\\\n]|\\\\['\\\\bfnrt/]|\\\\u[0-9a-fA-F]{4})*)(')",
					"captures": {
						"1": {
							"name": "punctuation.definition.string.begin.jon"
						},
						"3": {
							"name": "punctuation.definition.string.end.jon"
						}
					}
                }
            ]
        },
        "key_value": {
			"patterns": [
				{"include": "#key"},
				{"include": "#comments"},
				{
					"name": "meta.structure.dictionary.value.jon",
					"begin": ":",
					"beginCaptures": {
						"0": {
							"name": "punctuation.separator.jon"
						}
					},
					"end": "(,)|(?=\\])|\\n",
					"endCaptures": {
						"0": {
							"name": "punctuation.separator.jon"
						}
					},
					"patterns": [
						{"include": "#value"}
					]
				}
			]
        },
		"key": {
			"end": "(?=\\:)",
			"patterns": [
				{
					"contentName": "entity.name.jon",
					"patterns": [
						{"include": "#string"}
					]
				},
				{
					"name": "entity.name.jon",
					"match": "[^\\s\\u00a0\\u2007\\u202f\\ufeff$\"{}\\[\\]:=,+#`^?!@*&]+"
				}
			]
		},
		"value": {
			"patterns": [
				{"include": "#constant"},
				{"include": "#string"},
				{"include": "#integer"},
				{"include": "#float"},
				{"include": "#object"},
				{"include": "#array"},
				{
					"match": "(\\w+)?!('|\")",
					"name": "invalid.illegal.unexpected-identifier.jon"
				}
			]
		},
		"constant": {
			"comment": "Keyword constants",
			"name": "keyword.other.jon",
			"match": "\\b(?:true|false|null)\\b"
		},
		"object": {
			"comment": "Object",
			"begin": "\\{",
			"end": "\\}",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.dictionary.begin.jon"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.dictionary.end.jon"
				}
			},
			"patterns": [
				{"include": "#key_value"}
			]
		},
		"array": {
			"comment": "Array",
			"name": "meta.structure.array.value.jon",
			"begin": "\\[",
			"end": "\\]",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.array.begin.jon"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.array.end.jon"
				}
			},
			"patterns": [
				{"include": "#value"},
				{
					"match": "(,)|(?=\\])|\\n",
					"name": "punctuation.separator.jon"
				},
				{
					"match": "[^\\s\\]]",
					"name": "invalid.illegal.expected-array-separator.jon"
				}
			]
		},
		"float": {
			"patterns": [
				{
					"comment": "Floating-point number",
					"name": "constant.numeric.float.jon",
					"match": "\\b([0-9][0-9_]*\\.[0-9][0-9_]*)\\b"
				},
				{
					"comment": "Float literal with type",
					"name": "constant.numeric.float.jon",
					"match": "\\b([0-9][0-9_]*(?:\\.[0-9][0-9_]*)?)\\b"
				},
				{
					"comment": "Float literal with exp",
					"name": "constant.numeric.float.jon",
					"match": "\\b([0-9][0-9_]*(?:\\.[0-9][0-9_]*)?[eE][+-]?[0-9_]+)?\\b"
				}
			]
		},
		"integer": {
			"patterns": [
				{
					"comment": "Hex int literal",
					"name": "constant.numeric.hex.jon",
					"match": "\\b0[xX][a-fA-F0-9_]+\\b"
				},
				{
					"comment": "Octo int literal",
					"name": "constant.numeric.oct.jon",
					"match": "\\b0[oO][0-7_]+\\b"
				},
				{
					"comment": "Bin int literal",
					"name": "constant.numeric.bin.jon",
					"match": "\\b0[bB][01_]+\\b"
				},
				{
					"comment": "Decimal integer",
					"name": "constant.numeric.dec.jon",
					"match": "\\b[0-9][0-9_]*\\b"
				}
			]
		}
    }
}
	