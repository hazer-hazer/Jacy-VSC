{
    ".source.jc": {
        "todo": {
            "prefix": "todo",
            "body": [
                "// TODO: $0"
            ],
            "description": "TODO Comment"
        },
        "enum definition": {
            "prefix": "enum",
            "body": [
                "enum ${1:Name} {",
                "\t${2:}",
                "}"
            ],
            "description": "An enum declaration"
        },
        "let statement": {
            "prefix": "let",
            "body": [
                "let ${1:pattern} = ${2:value};"
            ],
            "description": "let statement"
        },
        "let borrow": {
            "prefix": "let ref",
            "body": [
                "let ref ${1:pattern} = ${2:value};"
            ],
            "description": "let borrow"
        },
        "let match reference": {
            "prefix": "let &",
            "body": [
                "let &${1:pattern} = ${2:value};"
            ],
            "description": "let match reference"
        },
        "let destruct struct": {
            "prefix": "let {",
            "body": [
                "let ${1:StructName} {${2:field}} = ${3:value};"
            ],
            "description": "let match struct"
        },
        "match expression": {
            "prefix": "match",
            "body": [
                "match ${1:value} {",
                "\t${2:pattern} => ${3:expression},",
                "}"
            ],
            "description": "match expression"
        },
        "if expression": {
            "prefix": "if",
            "body": [
                "if ${1:value} {",
                "\t$0",
                "}"
            ],
            "description": "if"
        },
        "if-let": {
            "prefix": "if let",
            "body": [
                "if let ${1:pattern} = ${2:expression} {",
                "\t$0",
                "}"
            ],
            "description": "if-let"
        },
        "func definition": {
            "prefix": "func",
            "body": [
                "func ${1:name}(${2:params}: ${3: Type})${4:: Type} {",
                "\t$0",
                "}"
            ],
            "description": "func"
        },
        "lambda expression": {
            "prefix": "\\_",
            "body": [
                "\\(${1:params}) -> $0"
            ],
            "description": "lambda"
        },
        "struct definition": {
            "prefix": "struct",
            "body": [
                "struct ${1:Name} {",
                "\t${2:fieldName}: ${3:Type},$0",
                "}"
            ],
            "description": "struct"
        },
        "trait definition": {
            "prefix": "trait",
            "body": [
                "trait ${1:Name} {",
                "\t$0",
                "}"
            ],
            "description": "trait"
        },
        "impl for": {
            "prefix": "impl-for",
            "body": [
                "impl ${1:Trait} for ${2:Type} {",
                "\t$0",
                "}"
            ],
            "description": "impl for"
        },
        "impl": {
            "prefix": "impl",
            "body": [
                "impl ${1:Type}",
                "\t$0",
                "}"
            ],
            "description": "impl type"
        },
        "type-alias": {
            "prefix": "type",
            "body": [
                "type ${1:Name} = ${2:Type};"
            ],
            "description": "type-alias"
        },
        "mod": {
            "prefix": "mod",
            "body": [
                "mod ${1:module_name} {",
                "\t$0",
                "}"
            ],
            "description": "module"
        },
        "use": {
            "prefix": "use",
            "body": [
                "use ${1:contents};"
            ],
            "description": "use-decl"
        },
        "for-loop": {
            "prefix": "for",
            "body": [
                "for ${1:pattern} in ${2:expression} {",
                "\t$0",
                "}"
            ],
            "description": "for-loop"
        },
        "loop": {
            "prefix": "loop",
            "body": [
                "loop {",
                "\t$0",
                "}"
            ],
            "description": "loop"
        },
        "while": {
            "prefix": "while",
            "body": [
                "while ${1:expression}",
                "\t$0",
                "}"
            ],
            "description": "while"
        },
        "while-let": {
            "prefix": "while let",
            "body": [
                "while let ${1:pattern} = ${2:expression} {",
                "\t$0",
                "}"
            ],
            "description": "while-let"
        },
        "return": {
            "prefix": "return",
            "body": [
                "return $0;"
            ],
            "description": "return"
        },
        "break": {
            "prefix": "break",
            "body": [
                "break $0;"
            ],
            "description": "break"
        },
        "continue": {
            "prefix": "continue",
            "body": [
                "continue;"
            ],
            "description": "continue"
        }
    }
}
